// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  MANAGER
  AGENT
  ADMIN
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  role             UserRole  @default(USER)
  disabled         Boolean   @default(false)
  accounts         Account[]
  sessions         Session[]
  createdTickets   Ticket[]  @relation("UserTicket")
  assignedTickets  Ticket[]  @relation("AgentTicket")
  createdRequests  Request[] @relation("UserRequest")
  assignedRequests Request[] @relation("AgentRequest")
  messages         Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketStatus {
  NEW
  WAITING_REPLY
  NEW_REPLY
  ON_HOLD
  RESOLVED
}

model Ticket {
  id             String          @id @default(cuid())
  refId          String          @unique
  title          String          @db.Text
  priority       Priority        @default(LOW)
  status         TicketStatus    @default(NEW)
  userEmail      String
  user           User            @relation("UserTicket", fields: [userEmail], references: [email], onDelete: Restrict)
  agentEmail     String?
  agent          User?           @relation("AgentTicket", fields: [agentEmail], references: [id], onDelete: Restrict)
  categoryId     String?
  category       TicketCategory? @relation(fields: [categoryId], references: [id])
  departmentId   String?
  department     Department?     @relation(fields: [departmentId], references: [id])
  messages       Message[]
  technicalNotes TechnicalNote[]
  logs           Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userEmail, agentEmail, categoryId, departmentId])
}

enum RequestStatus {
  NEW
  WAITING_REPLY
  NEW_REPLY
  ON_HOLD
  ASSET_ISSUED
  ASSET_OUT_OF_STOCK
  RESOLVED
}

enum MgrConfirm {
  PENDING
  CONFIRMED
  DENIED
}

model Request {
  id             String           @id @default(cuid())
  refId          String
  title          String           @db.Text
  priority       Priority         @default(LOW)
  status         RequestStatus    @default(NEW)
  mgrConfirm     MgrConfirm       @default(PENDING)
  userEmail      String
  user           User             @relation("UserRequest", fields: [userEmail], references: [email], onDelete: Restrict)
  agentEmail     String?
  agent          User?            @relation("AgentRequest", fields: [agentEmail], references: [id], onDelete: Restrict)
  categoryId     String?
  category       RequestCategory? @relation(fields: [categoryId], references: [id])
  departmentId   String?
  department     Department?      @relation(fields: [departmentId], references: [id])
  messages       Message[]
  technicalNotes TechnicalNote[]
  logs           Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userEmail, agentEmail, categoryId, departmentId])
}

model Message {
  id         String       @id @default(cuid())
  content    String       @db.Text
  userEmail  String
  user       User         @relation(fields: [userEmail], references: [email])
  ticketId   String?
  ticket     Ticket?      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  requestId  String?
  request    Request?     @relation(fields: [requestId], references: [id], onDelete: Cascade)
  Attachment Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userEmail, ticketId, requestId])
}

model Attachment {
  id        String  @id @default(cuid())
  name      String
  url       String  @db.Text
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
}

model TechnicalNote {
  id        String   @id @default(cuid())
  message   String   @db.Text
  ticketId  String?
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  requestId String?
  request   Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId, requestId])
}

model Log {
  id        String   @id @default(cuid())
  text      String   @db.Text
  ticketId  String?
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  requestId String?
  request   Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId, requestId])
}

model TicketCategory {
  id      String   @id @default(cuid())
  name    String   @unique
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestCategory {
  id       String    @id @default(cuid())
  name     String    @unique
  requests Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id       String    @id @default(cuid())
  name     String    @unique
  tickets  Ticket[]
  requests Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  MANAGER
  AGENT
  ADMIN
}

model User {
  id              String          @id @default(cuid())
  name            String
  empId           String?         @unique
  email           String          @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  designation     String?
  dob             DateTime?
  phoneNumber     String?
  role            UserRole        @default(USER)
  disabled        Boolean         @default(false)
  departmentId    String?
  department      Department?     @relation(fields: [departmentId], references: [id])
  accounts        Account[]
  sessions        Session[]
  createdTickets  Ticket[]        @relation("UserTicket")
  assignedTickets Ticket[]        @relation("AgentTicket")
  messages        Message[]
  technicalNotes  TechnicalNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketStatus {
  NEW
  NEW_REPLY
  WAITING_REPLY
  ON_HOLD
  RESOLVED
  REOPENED
}

enum TicketType {
  SUPPORT
  TASK
}

model Ticket {
  id             String          @id @default(cuid())
  refId          String          @unique
  title          String          @db.Text
  type           TicketType      @default(SUPPORT)
  priority       Priority        @default(LOW)
  status         TicketStatus    @default(NEW)
  ownerEmail     String
  owner          User            @relation("UserTicket", fields: [ownerEmail], references: [email], onDelete: Restrict)
  agentEmail     String?
  agent          User?           @relation("AgentTicket", fields: [agentEmail], references: [email], onDelete: Restrict)
  categoryId     String?
  category       TicketCategory? @relation(fields: [categoryId], references: [id])
  departmentId   String?
  department     Department?     @relation(fields: [departmentId], references: [id])
  messages       Message[]
  technicalNotes TechnicalNote[]
  logs           Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerEmail, agentEmail, categoryId, departmentId])
}

model Message {
  id          String       @id @default(cuid())
  content     String       @db.Text
  senderEmail String
  sender      User         @relation(fields: [senderEmail], references: [email])
  ticketId    String
  ticket      Ticket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderEmail, ticketId])
}

model Attachment {
  id        String  @id @default(cuid())
  name      String
  url       String  @db.Text
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
}

model TechnicalNote {
  id         String @id @default(cuid())
  content    String @db.Text
  ownerEmail String
  owner      User   @relation(fields: [ownerEmail], references: [email])
  ticketId   String
  ticket     Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerEmail, ticketId])
}

model Log {
  id       String @id @default(cuid())
  text     String @db.Text
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
}

model TicketCategory {
  id      String   @id @default(cuid())
  name    String   @unique
  tickets Ticket[]
}

model Department {
  id      String   @id @default(cuid())
  name    String   @unique
  users   User[]
  tickets Ticket[]
}
